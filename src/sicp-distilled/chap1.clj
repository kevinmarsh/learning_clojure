;; Exercise 1.2
;;  Translate the following expression into prefix form:
;;    5+4+(2−(3−(6+4/5)))
;;    ------------------
;;        3(6−2)(2−7)

(/ (+ 5
      4
      (- 2
         (- 3
            (+ 6
               (/ 4 5)))))
   (* 3
      (- 6 2)
      (- 2 7)))

;; Exercise 1.3:
;;  Define a function that takes three numbers as arguments and returns the sum
;;  of the squares of the two larger numbers.
(defn one-liner-largest-two-square-sum [x y z]
  (reduce +
          (map #(* % %)
               (rest (sort [x y z])))))

;; refactor 1.3
(defn square [x]
  (* x x))

(defn largest-two [coll]
  (take-last 2 (sort coll)))

(defn sum [coll]
  (reduce + coll))

(defn largest-two-square-sum [x y z]
  (sum (map square (largest-two [x y z]))))

;; test 1.3
(let [[x y z] [2 3 4]]
  (when (not= 25 (largest-two-square-sum x y z))
    (println (str "failed: " x y z))))
(let [[x y z] [6 2 9]]
  (when (not= 117 (largest-two-square-sum x y z))
    (println (str "failed: " x y z))))
(let [[x y z] [8 4 17]]
  (when (not= (one-liner-largest-two-square-sum x y z)
              (largest-two-square-sum x y z))
        (println "failed: fns aren't the same")))
(let [[x y z] [12 6 0]]
  (when (not= (one-liner-largest-two-square-sum x y z)
              (largest-two-square-sum x y z))
        (println "failed: fns aren't the same")))


;; Exercise 1.9:
;;   Each of the following two procedures defines a method for adding two positive
;;   integers in terms of the procedures inc , which increments its argument by 1,
;;   and dec , which decrements its argument by 1.
;;   Using the substitution model, illustrate the process generated by each
;;   procedure in evaluating (+ 4 5)
;;   Are these processes iterative or recursive?

;; recursive procedure
(defn + [a b]
  (if (= a 0)
      b
      (inc (+ (dec a) b))))

(+ 4 5)
(inc (+ (dec 4) 5))
(inc (+ 3 5))
(inc (inc (+ (dec 3) 5)))
(inc (inc (+ 2 5)))
(inc (inc (inc (+ (dec 2) 5))))
(inc (inc (inc (+ 1 5))))
(inc (inc (inc (inc (+ (dec 1) 5)))))
(inc (inc (inc (inc (+ 0 5)))))
(inc (inc (inc (inc 5))))
9


;; iterative procedure
(defn + [a b]
  (if (= a 0)
      b
      (+ (dec a) (inc b))))

(+ 4 5)
(+ (dec 4) (inc 5))
(+ 3 6)
(+ (dec 3) (inc 6))
(+ 2 7)
(+ (dec 2) (inc 7))
(+ 1 8)
(+ (dec 1) (inc 8))
(+ 0 9)
9


;; Exercise 1.10:
;;  The following procedure computes a mathematical function called Ackermann’s function.

(defn A [x y]
  (cond (= y 0) 0
        (= x 0) (* 2 y)
        (= y 1) 2
        :else (A (- x 1) (A x (- y 1)))))

;;  What are the values of the following expressions?
;; (A 1 10)
(A 1 10)
(A (- 1 1) (A 1 (- 10 1)))
(A 0 (A 1 9))
(* 2 (A (- 1 1) (A 1 (- 9 1))))
(* 2 (A 0 (A 1 8)))
(* 2 (* 2 (A 1 8)))
;; ...
(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A 1 1))))))))))
(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 2)))))))))
1024

;; (A 2 4)
(A 2 4)
(A (- 2 1) (A 2 (- 4 1)))
(A 1 (A 2 3))
(A 1 (A (- 2 1) (A 2 (- 3 1))))
(A 1 (A 1 (A 2 2)))
(A 1 (A 1 (A (- 2 1) (A 2 (- 2 1)))))
(A 1 (A 1 (A 1 (A 2 1))))
(A 1 (A 1 (A 1 2)))
(A 1 (A 1 (A (- 1 1) (A 1 (- 2 1)))))
(A 1 (A 1 (A 0 (A 1 1))))
(A 1 (A 1 (* 2 2)))
(A 1 (A 1 4))
(A 1 (A (- 1 1) (A 1 (- 4 1))))
(A 1 (A 0 (A 1 3)))
(A 1 (* 2 (A 1 3)))
(A 1 (* 2 (A (- 1 1) (A 1 (- 3 1)))))
(A 1 (* 2 (A 0 (A 1 2))))
(A 1 (* 2 (* 2 (A 1 2))))
(A 1 (* 2 (* 2 (A (- 1 1) (A 1 (- 2 1))))))
(A 1 (* 2 (* 2 (A 0 (A 1 1)))))
(A 1 (* 2 (* 2 (* 2 2))))
(A 1 16)
;; Let's cheat a bit, this is pretty much exponential
(reduce * (repeat 2 16))
65536

;; (A 3 3)
(A 3 3)
(A (- 3 1) (A 3 (- 3 1)))
(A 2 (A 3 2))
(A 2 (A (- 3 1) (A 3 (- 2 1))))
(A 2 (A 2 (A 3 1)))
(A 2 (A 2 2))
(A 2 (A (- 2 1) (A 2 (- 2 1))))
(A 2 (A 1 (A 2 1)))
(A 2 (A 1 2))
(A 2 (A (- 1 1) (A 1 (- 2 1))))
(A 2 (A 0 (A 1 1)))
(A 2 (A 0 2))
(A 2 4)
;; follow pattern above
65536

;;  Consider the following procedures, where A is the procedure defined above.
;;  Give concise mathematical definitions for the functions computed by the
;;  procedures f , g , and h for positive integer values of n.
(def (f n) (A 0 n))
;; is equivalant to: 2n
(def (g n) (A 1 n))
;; is equivalant to: 2^n
(def (h n) (A 2 n))
;; is equivalant to: 2^2^2...(n-1 times)
